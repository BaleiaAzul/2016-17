import BNO055
import sys
import threading
import math
import time


class Orientation(object):
    """
    Gets the orientation of the rover by using the BNO055.
    Requires that calibration data generated by calibration_save.py already exists.
    """
    def __init__(self):
        self.bno055 = BNO055.BNO055()
        if not self.bno055.begin():
            print 'Cannot initialize BNO055'
            sys.exit()
        with open('calibration_data.txt', 'r') as f:
            self.bno055.set_calibration(map(int, f.read().split(' ')))
        self.current_heading = 0.0
        self.lock = threading.Lock()
        self.updater_thread = OrientationUpdaterThread(self)
        self.updater_thread.start()

    def get_heading(self):
        """ Returns the current heading of the rover in degrees """
        with self.lock:
            return self.current_heading


class OrientationUpdaterThread(threading.Thread):
    """
    Updates the data for the Orientation class.
    Internal use only.
    """
    def __init__(self, orientation):
        super(OrientationUpdaterThread, self).__init__()
        self.daemon = True
        self.orientation = orientation
        self.heading_history = []
        self.heading_history_max_length = 10
        self.update_interval = 0.1

    def run(self):
        while True:
            magnetometer = self.orientation.bno055.read_magnetometer()
            unadjusted_heading = math.atan2(magnetometer[1], magnetometer[0])
            self.heading_history.append(unadjusted_heading)
            if len(self.heading_history) > self.heading_history_max_length:
                del self.heading_history[0]
            adjusted_heading = self.average_headings(self.heading_history)
            with self.orientation.lock:
                self.orientation.current_heading = math.degrees(adjusted_heading)
            time.sleep(self.update_interval)

    @staticmethod
    def average_headings(headings):
        """
        Calculates the average value of a list of headings in radians by finding the
        direction of the average of the unit vectors corresponding to each heading.
        """
        x_sum = 0.0
        y_sum = 0.0
        for theta in headings:
            x_sum += math.cos(theta)
            y_sum += math.sin(theta)
        return math.atan2(y_sum, x_sum)
